// Copyright 2022-2023 Markoleptic Games, SP. All Rights Reserved.

#pragma once

#include "CoreMinimal.h"
#include "Components/ActorComponent.h"
#include "Components/TimelineComponent.h"
#include "BSRecoilComponent.generated.h"


class ABSCharacter;
/** The component responsible for handling recoil generated by weapons */
UCLASS(meta=(BlueprintSpawnableComponent))
class BEATSHOT_API UBSRecoilComponent : public USceneComponent
{
	GENERATED_BODY()

public:
	UBSRecoilComponent();

protected:
	virtual void BeginPlay() override;

public:
	virtual void TickComponent(float DeltaTime, ELevelTick TickType,
		FActorComponentTickFunction* ThisTickFunction) override;

	/** Returns the current spread rotation (Pitch and Yaw at the current time). Used by FireGun ability */
	UFUNCTION(BlueprintPure, Category = "Recoil")
	virtual FRotator GetCurrentRecoilRotation() const;

	/** Begins or resumes the recoil timeline, allowing UpdateRecoil to receive input from the timeline on tick */
	UFUNCTION(BlueprintCallable, Category = "Recoil")
	void Recoil(const float FireRate);

	UFUNCTION(BlueprintCallable, Category = "Recoil")
	void StopRecoil();

protected:
	/** Vector curve that implements vertical and horizontal recoil */
	UPROPERTY(EditDefaultsOnly, Category = "Recoil")
	UCurveVector* RecoilCurve;

	/** Float curve that implements a screen kickback (camera shake) effect */
	UPROPERTY(EditDefaultsOnly, Category = "Recoil")
	UCurveFloat* KickbackCurve;

	/** Float curve that controls the intensity of the KickbackCurve */
	UPROPERTY(EditDefaultsOnly, Category = "Recoil")
	UCurveFloat* KickbackIntensityCurve;

	UPROPERTY(EditDefaultsOnly)
	float CameraRecoilInterpSpeed = 4.f;

	/** Interpolates the current gun recoil, camera recoil, and kickback inside of OnTick
	 *  based on CurrentShotRecoilRotation, CurrentShotCameraRecoilRotation, and KickbackAngle */
	virtual void UpdateKickbackAndRecoil(float DeltaTime);

	/** Update the screen-shake-like camera recoil */
	virtual void UpdateKickback(float DeltaTime);

	/** Updates CurrentShotRecoilRotation and CurrentShotCameraRecoilRotation. Bound to RecoilTimeline, which corresponds to the RecoilCurve */
	UFUNCTION()
	void UpdateRecoil(FVector Output);

	/** The timeline corresponding to RecoilCurve */
	FTimeline RecoilTimeline;

	/** The current rotation representing the spread for the bullet, used when the gun is fired */
	FRotator CurrentShotRecoilRotation;

	/** Same as CurrentShotRecoilRotation but applied at half the scale */
	FRotator CurrentShotCameraRecoilRotation;

	FTimerDelegate FireRateDelegate;
	FTimerHandle FireRateTimer;

	/** Whether or not the player is holding down left click */
	UPROPERTY(BlueprintReadWrite)
	bool bIsFiring;

	/** Whether or not to increment KickbackAngle, which is applied to the owning character's CameraRecoilComponent */
	bool bShouldKickback;

	/** The accumulated delta seconds since the last camera kickback duration */
	float KickbackAlpha;

	/** The value pulled from the KickbackCurve at time KickbackAlpha divided by KickbackDuration */
	float KickbackAngle;

	/** The duration of each kickback animation */
	float KickbackDuration = 0.2f;

	/** Used in recoil to make sure the first shot has properly applied recoil */
	int32 ShotsFired;
};
